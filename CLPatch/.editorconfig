# AV references point to C# coding guidelines:
# http://wiki.soloplan.de/wiki/doku.php?id=programming:csharp:guidelines
# List of all possible settings:
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# https://www.jetbrains.com/help/resharper/EditorConfig_Index.html

# top-most EditorConfig file
root = true

# Windows-style newlines with a newline ending every file
# see AV2400
[*]
charset = utf-8
guidelines = 130

end_of_line = crlf
indent_style = space
indent_size = 2
max_line_length = off
keep_existing_linebreaks = true

[*.xml]
insert_final_newline = false

[**/GeneratedSource/**.cs]
generated_code = true
dotnet_analyzer_diagnostic.severity = none
dotnet_diagnostic.severity = none

[*.Designer.cs]
generated_code = true
dotnet_analyzer_diagnostic.severity = none
dotnet_diagnostic.severity = none

[*.cshtml]
# "Xyz" property access is fine for razor files. No need for "this.Xyz".
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

[*.cs]
trim_trailing_whitespace = true
csharp_preferred_modifier_order = public, private, protected, internal, static, new, abstract, virtual, sealed, readonly, override, extern, unsafe, volatile, async, required
insert_final_newline = true
csharp_style_namespace_declarations = block_scoped:silent

# No change in line breaks:
keep_existing_arrangement = true

# This pertains to analyzer warning SA1116SplitParametersMustStartOnLineAfterDeclaration:
csharp_wrap_after_invocation_lpar = true

# Blank lines
blank_lines_before_single_line_comment = 0
blank_lines_between_using_groups = 0
blank_lines_before_block_statements = 0

# A "{" should not be followed by a comment: First need a line break
csharp_allow_comment_after_lbrace = false

# int SomeProp { get; set; } instead of 5 lines:
place_simple_declaration_blocks_on_single_line = true

# "this" qualification
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = true:suggestion
dotnet_style_qualification_for_event = true:suggestion

# Object initializers (like "new Foo { Prop = val, Prop2 = val2 }" etc.
keep_existing_initializer_arrangement = true
place_simple_initializer_on_single_line = true
max_initializer_elements_on_line = 1

# prefer language keywords (int, string, etc.) over framework type names (Int32, String, etc.)
# see AV2201
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Organize Usings
# Sort System.* usings alphabetically and place them before other usings.
# see AV2402
dotnet_sort_system_directives_first = true:suggestion

# For non-resharper/non-rider users: This will make auto-generated usings inside the namespace:
csharp_using_directive_placement = inside_namespace:suggestion

# Place else statements on a new line.
csharp_new_line_before_else = true:suggestion

# Place catch statements on a new line.
csharp_new_line_before_catch = true:suggestion

# Require finally statements to be on a new line after the closing brace.
csharp_new_line_before_finally = true:suggestion

# Indent switch case contents
csharp_indent_case_contents = true:suggestion

# Indent switch labels
csharp_indent_switch_labels = true:suggestion

# Require no space between the cast and the value
csharp_space_after_cast = false:suggestion

# Space After Keywords in Control Flow Statements: Require a space after a keyword
csharp_space_after_keywords_in_control_flow_statements = true:suggestion

# Space Between Method Declaration Argument-List Parentheses: Require no space after a keyword
csharp_space_between_method_declaration_parameter_list_parentheses = false:suggestion

# Leave Statements and Member Declarations on the Same Line
csharp_preserve_single_line_statements = false:suggestion

# Inlined variable declarations
csharp_style_inlined_variable_declaration = true:suggestion

# Use expression-bodied members appropriately (AV2410)
# See https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#expression_bodied_members
csharp_style_expression_bodied_methods = when_on_single_line:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = when_on_single_line:none
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion

# A parameter or property name containing Text, Message, or Caption should not trigger CA1303
dotnet_code_quality.CA1303.use_naming_heuristic = true

# public List<int> foo = new() // NOT "new ()". (C# 8)
csharp_space_before_new_parentheses = false

# new()' vs 'new T()(C# 9)
# Object creation when created type is evident from usage: use target typed (it's shorter)
# https://www.jetbrains.com/help/resharper/Object_Creation_Style.html
# and https://www.jetbrains.com/help/resharper/EditorConfig_CSHARP_CSharpCodeStylePageImplSchema.html#resharper_csharp_object_creation_when_type_evident
csharp_object_creation_when_type_evident = target_typed

# new()' vs 'new T()(C# 9)
# Object creation when created type is not evident from usage: use explict type (better readable)
# https://www.jetbrains.com/help/resharper/Object_Creation_Style.html
# and https://www.jetbrains.com/help/resharper/EditorConfig_CSHARP_CSharpCodeStylePageImplSchema.html#resharper_csharp_object_creation_when_type_not_evident
csharp_object_creation_when_type_not_evident = explicitly_typed
csharp_indent_labels = one_less_than_current
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = true:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_throw_expression = true:suggestion

[*.{cs,vb}]
#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
